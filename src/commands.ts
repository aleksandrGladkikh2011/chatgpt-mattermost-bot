import { DateTime } from 'luxon';

import Channels from './models/channels';
import Prompts from './models/prompts';
import ScheduledPrompts from './models/scheduled_prompts';
import Reminders from './models/reminders';
import Faqs from './models/faqs';

import { calculateNextRunDate, WEEK_DAYS, ALL_DAYS } from './utils/time';
import { split } from './utils/string';

import { summaryPrompt, summaryDayPrompt, summaryAdvicePrompt } from './summary';
import { getCalendarForCurrentMonth } from './requests/my_team';

import { queryData, deleteById, addTextById } from './vectors';

interface Command {
    description: string;
    example: string;
    channel_type: string[];
    fn: (...args: any[]) => Promise<any>;
}

interface ChannelData {
    _id?: string;
    shouldValidateContent: boolean;
    channel_display_name: string;
    prompt: string;
    created_by: string;
}

interface PromptData {
    _id?: string;
    name: string;
    text: string;
    type: string;
    created_by: string;
}

export const HANDLE_PROMPTS: { [key: string]: string } = {
    summary: summaryPrompt,
    summary_day: summaryDayPrompt,
    summary_advice: summaryAdvicePrompt,
};

export const COMMANDS: { [key: string]: Command } = {
    '!help': {
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏',
        example: '\n!help',
        channel_type: ['D'],
        fn: async () => {
            const helpMessage = Object.entries(COMMANDS)
                .map(([cmd, { description, example, channel_type }]) => `**${cmd}** - ${description}\n${channel_type.includes('D') ? 'üîπ –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö' : 'üîπ –î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç—Ä–µ–¥–µ –∫–∞–Ω–∞–ª–∞'}\n–ü—Ä–∏–º–µ—Ä: ${example}`)
                .join('\n\n');

            return {
                botInstructions: `**–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**\n\n${helpMessage}`,
                useFunctions: false,
            };
        }
    },
    '!content_guard': {
        description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞',
        example: '\n1. !content_guard set <channel_name> <prompt>\n2. !content_guard list\n3. !content_guard delete <channel_name>',
        channel_type: ['D'],
        fn: async ({ channels }: { channels: Channels }, { post: { message }, sender_name }: { post: { message: string }, sender_name: string }) => {
            const [, action, channel_name, prompt] = split(message, ' ', 3);

            let botInstructions = '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.';

            if (action === 'set' && channel_name && prompt) {
                const existingChannel = await channels.get({ channel_display_name: channel_name }) || {};
                const saveChannelData: ChannelData = {
                    shouldValidateContent: true,
                    channel_display_name: channel_name,
                    prompt: prompt,
                    created_by: sender_name,
                };

                if (existingChannel._id) {
                    await channels.update({ _id: existingChannel._id }, saveChannelData);
                } else {
                    await channels.add(saveChannelData);
                }

                botInstructions = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è **${channel_name}**\nüîπ **Prompt**: ${prompt}\nüë§ **–î–æ–±–∞–≤–∏–ª**: ${sender_name}`;
            }

            if (action === 'list') {
                const guards = await channels.getAll({ shouldValidateContent: true });

                if (!guards.length) {
                    botInstructions = '–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚ÑπÔ∏è –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.';
                } else {
                    const listMessage = guards.map((g: ChannelData) => 
                        `üìå **–ö–∞–Ω–∞–ª**: ${g.channel_display_name}\nüîπ **Prompt**: ${g.prompt}\nüë§ **–î–æ–±–∞–≤–∏–ª**: ${g.created_by}`
                    ).join('\n\n');
    
                    botInstructions = `üìñ **–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:**\n\n${listMessage}`;
                }
            }

            if (action === 'delete' && channel_name) {
                const existingChannel: ChannelData = await channels.get({ channel_display_name: channel_name });

                if (!existingChannel) {
                    botInstructions = `‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è **${channel_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
                } else {
                    if (existingChannel.created_by !== sender_name) {
                        botInstructions = '‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏.';
                    } else {
                        await channels.remove({ _id: existingChannel._id }, true);
                        botInstructions = `üóë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è **${channel_name}** —É–¥–∞–ª–µ–Ω–∞.`;
                    }
                }
            } 

            return {
                botInstructions,
                useFunctions: false,
            };
        }
    },
    '!prompt': {
        description:  `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ)

        üìå **Best practices –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤**:
        ‚Ä¢ üîπ –ü—Ä–æ–º–ø—Ç **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–æ–≤–∞**: \`–ü—Ä–æ–º–ø—Ç:\`
        ‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ —á–µ—Ç–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–æ–ª—å: "–ü—Ä–æ–º–ø—Ç: –¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..."
        ‚Ä¢ –î–æ–±–∞–≤–ª—è–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã: "–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å ‚Äî —É—Ç–æ—á–Ω–∏ –µ—ë."
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
        ‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
        ‚Ä¢ –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        
        üí° –ü—Ä–∏–º–µ—Ä—ã:
        - "–ü—Ä–æ–º–ø—Ç: –¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è."
        - "–ü—Ä–æ–º–ø—Ç: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."`,
        example: '\n1. !prompt save <public|private> <name> <text>\n2. !prompt list\n3. !prompt get <name>\n4. !prompt delete <name>',
        channel_type: ['D'],
        fn: async ({ prompts }: { prompts: Prompts }, { post: { message }, sender_name }: { post: { message: string }, sender_name: string }) => {
            const [, action, typeOrName, nameOrText, promptText] = split(message, ' ', 4);

            let botInstructions = '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.';

            if (action === 'save' && typeOrName && nameOrText && promptText) {
                const type = typeOrName.toLowerCase();

                if (type !== 'public' && type !== 'private') {
                    botInstructions = '‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `public` –∏–ª–∏ `private`.';
                } else {
                    const promptName = nameOrText;
                    const existingPrompt = await prompts.get({ name: promptName });

                    if (existingPrompt || HANDLE_PROMPTS[promptName]) {
                        botInstructions = `‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º **${promptName}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
                    } else {
                        await prompts.add({
                            name: promptName,
                            text: promptText,
                            type: type,
                            created_by: sender_name,
                        });

                        botInstructions = `‚úÖ –ü—Ä–æ–º–ø—Ç **${promptName}** (${type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\nüë§ **–ê–≤—Ç–æ—Ä**: ${sender_name}`;
                    }
                }
            }

            if (action === 'list') {
                const allPrompts = await prompts.getAll({});
                const userPrompts = allPrompts.filter((p: PromptData) => p.type === 'public' || p.created_by === sender_name);

                if (!userPrompts.length) {
                    botInstructions = '‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.';
                } else {
                    const listMessage = userPrompts.map((p: PromptData) =>
                        `üìå **${p.name}** (${p.type})\nüë§ **–ê–≤—Ç–æ—Ä**: ${p.created_by}`
                    ).join('\n\n');

                    botInstructions = `üìñ **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:**\n\n${listMessage}`;
                }
            }

            if (action === 'get' && typeOrName) {
                const prompt = await prompts.get({ name: typeOrName });

                if (HANDLE_PROMPTS[typeOrName]) {
                    botInstructions = `üìå **${typeOrName}** (public)\nüë§ **–ê–≤—Ç–æ—Ä**: system\nüìù **–¢–µ–∫—Å—Ç:**\n${HANDLE_PROMPTS[typeOrName]}`;
                } else if (!prompt) {
                    botInstructions = `‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç **${typeOrName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
                } else {
                    if (prompt.type === 'private' && prompt.created_by !== sender_name) {
                        botInstructions = `‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–º–ø—Ç—É.`;
                    } else {
                        botInstructions = `üìå **${prompt.name}** (${prompt.type})\nüë§ **–ê–≤—Ç–æ—Ä**: ${prompt.created_by}\nüìù **–¢–µ–∫—Å—Ç:**\n${prompt.text}`;
                    }
                }
            }

            if (action === 'delete' && typeOrName) {
                const prompt = await prompts.get({ name: typeOrName });

                if (HANDLE_PROMPTS[typeOrName]) {
                    botInstructions = '‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç.';
                } else if (!prompt) {
                    botInstructions = `‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç **${typeOrName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
                } else {
                    if (prompt.created_by !== sender_name) {
                        botInstructions = '‚õî –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–º–ø—Ç—ã.';
                    } else {
                        await prompts.remove({ name: typeOrName });

                        botInstructions = `üóë –ü—Ä–æ–º–ø—Ç **${typeOrName}** —É–¥–∞–ª–µ–Ω.`;
                    }
                }
            }

            return {
                botInstructions,
                useFunctions: false,
            };
        }
    },
    '!schedule_prompt': {
        description: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–¥—É –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è',
        example: '\n1. !schedule_prompt <prompt_name>',
        // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —É–∫–∞–∑–≤—ã–∞–µ—Ç—Å—è
        channel_type: ['O', 'P'],
        fn: async (
            { scheduledPrompts, prompts }: { scheduledPrompts: ScheduledPrompts, prompts: Prompts },
            { post: { message, root_id, channel_id, id }, sender_name, botName }: { post: { message: string, root_id: string, channel_id: string, id: string }, sender_name: string, botName: string }
        ) => {
            const [, promptName] = split(message.replace(`@${botName}`, '').trim(), ' ', 1);

            if (!promptName) {
                return {
                    botInstructions: '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–º–ø—Ç–∞. –ü—Ä–∏–º–µ—Ä: `!schedule_prompt summary`',
                    useFunctions: false,
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ç—Ä–µ–¥–µ
            if (!root_id) {
                return {
                    botInstructions: '‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–¥–∞.',
                    useFunctions: false,
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç (public –∏–ª–∏ private)
            const prompt = HANDLE_PROMPTS[promptName] || await prompts.get({
                name: promptName,
                $or: [
                    { type: 'public' },
                    { type: 'private', created_by: sender_name }
                ]
            });

            if (!prompt) {
                return {
                    botInstructions: `‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º **${promptName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                    useFunctions: false,
                };
            }

            const mskMidnight = DateTime.now()
                .setZone('Europe/Moscow')
                .startOf('day')
                .toMillis();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ
            const existing = await scheduledPrompts.get({
                thread_id: root_id,
                run_date: {
                    $gte: mskMidnight,
                    $lt: mskMidnight + 24 * 60 * 60 * 1000,
                },
            });

            if (existing) {
                return { 
                    botInstructions: `‚ö†Ô∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞: **${existing.prompt_name}**.`,
                    useFunctions: false,
                };
            }

            const now = new Date().getTime();

            await scheduledPrompts.add({
                thread_id: root_id,
                channel_id,
                message_id: id,
                sender_name,
                prompt_name: promptName,
                created_at: now,
                run_date: now,
            });

            return {
                botInstructions: `üìå –ü—Ä–æ–º–ø—Ç **${promptName}** –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —ç—Ç–æ–º—É —Ç—Ä–µ–¥—É —Å–µ–≥–æ–¥–Ω—è –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è.`,
                useFunctions: false,
            };
        }
    },
    '!reminder': {
        description: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ)

        üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        ‚Ä¢ !reminder add <HH:mm> <repeat|once> [<days|all>] <withHistory> <prompt_name> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. Days: ${ALL_DAYS.join(', ')}. –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (sat, sun) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–∏. withHistory - –±–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
        ‚Ä¢ !reminder list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        ‚Ä¢ !reminder delete <prompt_name> ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ`,

        example: '\n1. !reminder add 09:00 repeat mon,wed,fri false daily_meeting\n2. !reminder list\n3. !reminder delete daily_meeting',
        channel_type: ['O', 'P'],

        fn: async (
            { reminders, prompts }: { reminders: Reminders, prompts: Prompts },
            { post: { message, root_id, channel_id, id }, sender_name, botName }: { post: { message: string, root_id: string, channel_id: string, id: string }, sender_name: string, botName: string }
        ) => {
            const [, action, timeOrName, repeatOrPrompt, daysOrPrompt, withHistory, promptName] = split(message.replace(`@${botName}`, '').trim(), ' ', 6);
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª
            if (root_id) {
                return {
                    botInstructions: '‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ.',
                    useFunctions: false,
                };
            }

            // üî∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if (action === 'add' && timeOrName && repeatOrPrompt) {
                const time = timeOrName;
                const repeat = repeatOrPrompt === 'repeat';

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                if (!/^\d{2}:\d{2}$/.test(time)) {
                    return {
                        botInstructions: '‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm. –ü—Ä–∏–º–µ—Ä: `!reminder add 09:00 repeat daily_meeting`',
                        useFunctions: false,
                    };
                }

                const [, minutes] = time.split(':').map(Number);
                if (minutes % 5 !== 0) {
                    return {
                        botInstructions: '‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 5 –º–∏–Ω—É—Ç–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00, 09:05, 09:10).',
                        useFunctions: false
                    };
                }

                let days: string[];
                let finalPromptName: string;

                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
                if (promptName) {
                    const splitDays = daysOrPrompt.split(',').map(d => d.trim().toLowerCase());

                    days = splitDays.includes('all') ? WEEK_DAYS : splitDays;
                    finalPromptName = promptName;
                } else {
                    // –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                    const now = DateTime.now().setZone('Europe/Moscow');
                    const currentDay = now.toFormat('ccc').toLowerCase();
                    const currentTime = now.toFormat('HH:mm');

                    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ ‚Äî —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                    if (currentTime <= time) {
                        days = [currentDay];
                    } else {
                        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                        const nextDayIndex = (WEEK_DAYS.indexOf(currentDay) + 1) % WEEK_DAYS.length;
                        const nextDay = WEEK_DAYS[nextDayIndex];
                        days = [nextDay];
                    }

                    finalPromptName = daysOrPrompt;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                if (!days.every(d => ALL_DAYS.includes(d))) {
                    return {
                        botInstructions: '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: mon,tue,wed,thu,fri,sat,sun –∏–ª–∏ all.',
                        useFunctions: false,
                    };
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
                const prompt = HANDLE_PROMPTS[finalPromptName] || await prompts.get({
                    name: finalPromptName,
                    $or: [
                        { type: 'public' },
                        { type: 'private', created_by: sender_name }
                    ]
                });
                
                if (!prompt) {
                    return {
                        botInstructions: `‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º **${finalPromptName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                        useFunctions: false,
                    };
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                const existing = await reminders.get({ prompt_name: finalPromptName, channel_id: channel_id, active: true });

                if (existing) {
                    return {
                        botInstructions: `‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º **${finalPromptName}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
                        useFunctions: false,
                    };
                }

                const now = new Date().getTime();
                const nextRunDate = calculateNextRunDate(time, days);

                await reminders.add({
                    message_id: id,
                    channel_id: channel_id,
                    prompt_name: finalPromptName,
                    created_at: now,
                    run_date: nextRunDate,
                    time,
                    repeat,
                    days,
                    created_by: sender_name,
                    active: true,
                    withHistory: withHistory === 'true',
                });

                return {
                    botInstructions: `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ **${finalPromptName}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${time} (${repeat ? '–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è' : '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'}).`,
                    useFunctions: false,
                };
            }

            // üî∏ –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if (action === 'list') {
                const activeReminders = await reminders.getAll({ channel_id: channel_id, active: true });

                if (!activeReminders.length) {
                    return {
                        botInstructions: '‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.',
                        useFunctions: false,
                    };
                }

                const listMessage = activeReminders.map((r: any) => {
                    // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö
                    const now = DateTime.now().setZone('Europe/Moscow');
                    const currentDayIndex = now.weekday % 7; // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    const currentTime = now.toFormat('HH:mm');
                
                    let nextRunDate;

                    if (r.repeat) {
                        // –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–µ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                        const dayIndexes = r.days.map((day: string) => ALL_DAYS.indexOf(day));
                        
                        // –ù–∞–π–¥—ë–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                        const futureDays = dayIndexes
                            .map((dayIndex: number) => {
                                const daysDiff = (dayIndex - currentDayIndex + 7) % 7;
                                const targetDate = now.plus({ days: daysDiff }).set({
                                    hour: parseInt(r.time.split(':')[0]),
                                    minute: parseInt(r.time.split(':')[1]),
                                    second: 0,
                                    millisecond: 0
                                });
                
                                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è
                                if (daysDiff === 0 && currentTime <= r.time) {
                                    return targetDate;
                                }
                                // –ï—Å–ª–∏ –¥–µ–Ω—å –≤ –±—É–¥—É—â–µ–º
                                return targetDate;
                            })
                            .sort((a: DateTime, b: DateTime) => a.toMillis() - b.toMillis());
                
                        nextRunDate = futureDays[0].toFormat('ccc, HH:mm');
                    } else {
                        // –ï—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ, –±–µ—Ä—ë–º run_date
                        const reminderDate = DateTime.fromMillis(r.run_date).setZone('Europe/Moscow');

                        if (reminderDate > now) {
                            nextRunDate = reminderDate.toFormat('ccc, HH:mm');
                        } else {
                            nextRunDate = '–∏—Å—Ç–µ–∫–ª–æ';
                        }
                    }
                
                    return `‚Ä¢ ${r.prompt_name} ‚Äî ${r.time} (${r.repeat ? '–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è' : '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'}) –≤ –¥–Ω–∏: ${r.days.join(', ')} (—Å–ª–µ–¥—É—é—â–µ–µ: ${nextRunDate})`;
                }).join('\n');
                

                return {
                    botInstructions: `üìã **–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n${listMessage}`,
                    useFunctions: false,
                };
            }

            // üî∏ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if (action === 'delete' && timeOrName) {
                const promptName = timeOrName;

                const existing = await reminders.get({ prompt_name: promptName, channel_id: channel_id, active: true });

                if (!existing) {
                    return {
                        botInstructions: `‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ **${promptName}** –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                        useFunctions: false,
                    };
                }

                await reminders.update({ _id: existing._id }, { active: false });

                return {
                    botInstructions: `üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ **${promptName}** —É–¥–∞–ª–µ–Ω–æ.`,
                    useFunctions: false,
                };
            }

            return {
                botInstructions: '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
                useFunctions: false,
            };
        }
    },
    '!faq': {
        description: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - FAQ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ)

        üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        ‚Ä¢ !faq <name> ‚Äî –ø–æ–∏—Å–∫ FAQ —Å –∫–ª—é—á–æ–º "VPN"
        ‚Ä¢ !faq add <name> <text> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FAQ
        ‚Ä¢ !faq delete <name> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ FAQ
        ‚Ä¢ !faq list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö FAQ`,

        example: '\n1. !faq VPN\n2. !faq add VPN –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN\n3. !faq delete VPN\n4. !faq list',
        channel_type: ['O', 'P', 'D'],
        fn: async (
            { faqs }: { faqs: Faqs },
            { post: { message }, sender_name }: { post: { message: string, root_id: string, channel_id: string, id: string }, sender_name: string, botName: string }
        ) => {
            const [, action, name, text] = split(message, ' ', 3);

            if (['add', 'delete', 'list'].includes(action)) {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FAQ
                if (action === 'add' && name && text) {
                    const existing = await faqs.get({ name });

                    if (existing) {
                        return {
                            botInstructions: `‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å –∏–º–µ–Ω–µ–º "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
                            useFunctions: false,
                        };
                    }

                    const faq = await faqs.add({
                        name,
                        text,
                        created_by: sender_name,
                        created_at: Date.now(),
                    });

                    await addTextById({ _id: faq.insertedId, text });

                    return {
                        botInstructions: `‚úÖ FAQ "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
                        useFunctions: false,
                    };
                }

                // –£–¥–∞–ª–µ–Ω–∏–µ FAQ
                if (action === 'delete' && name) {
                    const existing = await faqs.get({ name });

                    if (!existing) {
                        return {
                            botInstructions: `‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å –∏–º–µ–Ω–µ–º "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                            useFunctions: false,
                        };
                    }

                    await faqs.remove({ name });
                    await deleteById(existing._id);

                    return {
                        botInstructions: `üóëÔ∏è FAQ "${name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`,
                        useFunctions: false,
                    };
                }

                // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö FAQ
                if (action === 'list') {
                    const allFaqs = await faqs.getAll({});
                    if (allFaqs.length === 0) {
                        return {
                            botInstructions: '‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ FAQ –ø—É—Å—Ç.',
                            useFunctions: false,
                        };
                    }

                    const list = allFaqs.map((faq: any) => `‚Ä¢ ${faq.name}`).join('\n');
                    return {
                        botInstructions: `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n${list}`,
                        useFunctions: false,
                    };
                }

                return {
                    botInstructions: '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "!help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
                    useFunctions: false,
                };
            }

            const [, request] = split(message, ' ', 1);
            // –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            const result = await queryData(request);

            return {
                botInstructions: `–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n${result}`,
                useFunctions: false,
            };
        }
    },
    '!absence': {
        description: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏ –¥—Ä.) –≤–æ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–µ.

        üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        ‚Ä¢ !absence <–∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è—Ö`,
        example: `\n1. !absence –ò–≤–∞–Ω–æ–≤, –ö—É–¥–µ–ª–∫–æ –†–æ–º–∞–Ω, –ü–µ—Ç—Ä–æ–≤`,
        channel_type: ['O', 'P', 'D'],
        fn: async (
            {},
            { post: { message } }: { post: { message: string }, }
        ) => {
            const [, names] = split(message, ' ', 1);

            if (!names) {
                return {
                    botInstructions: '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: `!absence –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω`',
                    useFunctions: false,
                };
            }

            const results = await getCalendarForCurrentMonth();

            if (!results.length) {
                return {
                    botInstructions: 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è—Ö.',
                    useFunctions: false,
                };
            }

            const output = results.map(({ user, absences }) => {
                if (!absences || absences.length === 0) {
                    return `‚úÖ –£ **${user}** –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π.`;
                }
    
                const list = absences.map(abs => {
                    return `‚Ä¢ ${abs.date} (${abs.count} –¥–Ω.) ‚Äî ${abs.typeName} [${abs.statusName}]`;
                }).join('\n');
    
                return `üë§ **${user}**:\n${list}`;
            }).join('\n\n');

            return {
                botInstructions: `–ü—Ä–æ–º–ø—Ç: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–æ–≤ ${names} –∏ –≤—ã–≤–µ–¥–∏ –≤ —á–∏—Ç–∞–µ–º–æ–π —Ñ–æ—Ä–º–µ –∫—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞. üìÖ –í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:\n${output}`,
                useFunctions: false,
                useChatGPT: true,
            };
        }
    }
}
