import fs from 'fs';
import { generateEmbedding } from './openai-wrapper';
import { vectorsLog } from './logging';

import Storage from './storage';
import Vectors from './models/vectors';
import Faqs from './models/faqs';

async function initModules() {
  const storage = new Storage({});
  await storage.init();

  return {
    vectors: new Vectors({}, storage),
    faqs: new Faqs({}, storage),
  };
}

function generateKey(id: number, i: number) {
  return `${id}:${i}`;
}

export async function addTextById(faq: { _id: number, text: string }) {
  const { vectors } = await initModules();
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = faq.text.split('\n');
  
  for (const [i, line] of lines.entries()) {
    const embedding = await generateEmbedding(line);
    await vectors.uploadData(generateKey(faq._id, i), embedding, line);
    vectorsLog.info({ message: `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç #${faq._id * 1000 + i}: ${line.slice(0, 50)}...` });
  }

  vectorsLog.info({ message: 'üöÄ –ù–æ–≤—ã–π FAQ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Redis!' });
}

export async function deleteById(id: number) {
  const { vectors } = await initModules();

  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–∞–Ω–Ω–æ–≥–æ FAQ
    for (let i = 0; i < 100; i++) {
      const key = generateKey(id, i);
      await vectors.deleteData(key);
      vectorsLog.info({ message: `‚úÖ –£–¥–∞–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç ${key}` });
    }

    vectorsLog.info({ message: 'üöÄ FAQ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ Redis!' });
  } catch (error: any) {
    vectorsLog.error({ message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ FAQ ${id}: ${error.message}`, error: error.message });
  }
}

export async function uploadData() {
  const { vectors, faqs } = await initModules();
  await vectors.createIndex();
  const data: { id: number, text: string }[] = [];
  const faqsData = await faqs.getAll({});

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  faqsData.forEach((faq: { _id: number, text: string }) => {
    faq.text.split('\n').forEach((text, index) => {
      data.push({ id: faq._id, text });
    });
  });

  for (const [i, item] of data.entries()) {
    try {
      const embedding = await generateEmbedding(item.text);

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: doc:<faqId>:<lineNumber>
      const key: string = generateKey(item.id, i);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis
      await vectors.uploadData(key, embedding, item.text);
      vectorsLog.info({ message: `‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç ${key}: ${item.text.slice(0, 50)}...` });
    } catch (error: any) {
      vectorsLog.error({ message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${item.id}: ${error.message}`, error: error.message });
    }
  }

  vectorsLog.info({ message: 'üöÄ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Redis!' });
}

export async function queryData(query: string) {
  const { vectors } = await initModules();
  const embedding = await generateEmbedding(query);
  const floatArray = new Float32Array(embedding);
  const vectorBuffer = Buffer.from(floatArray.buffer);
  const results = await vectors.searchIndex(vectorBuffer);
  
  if (!results || !results.length || results[0] === 0) {
    return '–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ';
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const numDocs = results[0] as number;

  vectorsLog.info({ message: 'üîç –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', numDocs });

  const response = [];

  for (let i = 1; i < results.length; i += 2) {
    const fields = results[i + 1] as string[];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è
    const textIndex = fields.indexOf('text');
    const text = textIndex !== -1 ? fields[textIndex + 1] : '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';

    response.push(text);
  }

  return response.join('\n');
}
